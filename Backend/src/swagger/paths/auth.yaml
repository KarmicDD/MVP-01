paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with email, password, and role
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                password:
                  type: string
                  format: password
                  minLength: 8
                  description: User's password (min 8 characters)
                role:
                  type: string
                  enum: [startup, investor]
                  description: User's role in the system
              required:
                - email
                - password
                - role
            example:
              email: user@example.com
              password: password123
              role: startup
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  token:
                    type: string
                    description: JWT token for authentication
                  user:
                    type: object
                    properties:
                      userId:
                        type: string
                        format: uuid
                      email:
                        type: string
                        format: email
                      role:
                        type: string
                        enum: [startup, investor]
        '400':
          description: Invalid input or user already exists
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      message:
                        type: string
                        example: User already exists
                  - type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            msg:
                              type: string
                            param:
                              type: string
                            location:
                              type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login to the system
      description: Authenticate a user with email and password
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                password:
                  type: string
                  format: password
                  description: User's password
              required:
                - email
                - password
            example:
              email: user@example.com
              password: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  token:
                    type: string
                    description: JWT token for authentication
                  user:
                    type: object
                    properties:
                      userId:
                        type: string
                        format: uuid
                      email:
                        type: string
                        format: email
                      role:
                        type: string
                        enum: [startup, investor]
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email or password
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/google:
    get:
      tags:
        - Authentication
      summary: Initiate Google OAuth login
      description: Redirect to Google for OAuth authentication
      operationId: googleOAuth
      responses:
        '302':
          description: Redirect to Google OAuth
          headers:
            Location:
              schema:
                type: string
              description: Google OAuth URL

  /auth/google/callback:
    get:
      tags:
        - Authentication
      summary: Google OAuth callback
      description: Callback endpoint for Google OAuth authentication
      operationId: googleOAuthCallback
      parameters:
        - name: code
          in: query
          description: OAuth authorization code
          required: true
          schema:
            type: string
      responses:
        '302':
          description: Redirect to frontend with token or role selection
          headers:
            Location:
              schema:
                type: string
              description: Frontend URL with token or role selection

  /auth/linkedin:
    get:
      tags:
        - Authentication
      summary: Initiate LinkedIn OAuth login
      description: Redirect to LinkedIn for OAuth authentication
      operationId: linkedinOAuth
      responses:
        '302':
          description: Redirect to LinkedIn OAuth
          headers:
            Location:
              schema:
                type: string
              description: LinkedIn OAuth URL

  /auth/linkedin/callback:
    get:
      tags:
        - Authentication
      summary: LinkedIn OAuth callback
      description: Callback endpoint for LinkedIn OAuth authentication
      operationId: linkedinOAuthCallback
      parameters:
        - name: code
          in: query
          description: OAuth authorization code
          required: true
          schema:
            type: string
      responses:
        '302':
          description: Redirect to frontend with token or role selection
          headers:
            Location:
              schema:
                type: string
              description: Frontend URL with token or role selection

  /auth/update-role:
    post:
      tags:
        - Authentication
      summary: Update role for OAuth user
      description: Set the role for a user who authenticated via OAuth
      operationId: updateOAuthUserRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
                  description: User ID
                role:
                  type: string
                  enum: [startup, investor]
                  description: User's role in the system
              required:
                - userId
                - role
            example:
              userId: 123e4567-e89b-12d3-a456-426614174000
              role: startup
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Role updated successfully
                  token:
                    type: string
                    description: Updated JWT token with role
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        msg:
                          type: string
                        param:
                          type: string
                        location:
                          type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
