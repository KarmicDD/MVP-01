generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                     @id @default(autoincrement())
  user_id               String                  @unique @default(uuid())
  email                 String                  @unique
  password_hash         String?
  oauth_provider        String?
  oauth_id              String?
  role                  String
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  profileShares         ProfileShare[]
  profileShareAnalytics ProfileShareAnalytics[]
  documentViews         DocumentView[]
  documentDownloads     DocumentDownload[]

  @@map("users")
}

model ProfileShare {
  id           Int      @id @default(autoincrement())
  user_id      String
  share_token  String   @unique
  expires_at   DateTime
  created_at   DateTime @default(now())
  view_count   Int      @default(0)
  share_method String?  @default("email")
  user         User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("profile_shares")
}

model ProfileShareAnalytics {
  id              Int      @id @default(autoincrement())
  user_id         String
  share_method    String
  recipient_count Int      @default(1)
  shared_url      String
  created_at      DateTime @default(now())
  user            User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("profile_share_analytics")
}

model DocumentView {
  id          Int      @id @default(autoincrement())
  document_id String
  viewer_id   String
  viewer_type String // 'startup' or 'investor'
  entity_id   String
  entity_type String // 'startup' or 'investor'
  viewed_at   DateTime @default(now())
  user        User     @relation(fields: [viewer_id], references: [user_id], onDelete: Cascade)

  @@index([document_id])
  @@index([viewer_id])
  @@index([entity_id])
  @@map("document_views")
}

model DocumentDownload {
  id              Int      @id @default(autoincrement())
  document_id     String
  downloader_id   String
  downloader_type String // 'startup' or 'investor'
  entity_id       String
  entity_type     String // 'startup' or 'investor'
  downloaded_at   DateTime @default(now())
  user            User     @relation(fields: [downloader_id], references: [user_id], onDelete: Cascade)

  @@index([document_id])
  @@index([downloader_id])
  @@index([entity_id])
  @@map("document_downloads")
}
